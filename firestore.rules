/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for contacts and groups.
 * Each user has complete control over their own data, and no cross-user access is permitted.
 *
 * Data Structure:
 * All contact and group data is nested under /users/{userId}, ensuring clear ownership.
 *
 * Key Security Decisions:
 * - Users can only access their own contacts and groups.
 * - Listing contacts and groups is restricted to the owner.
 * - Data validation is minimal, focusing on ownership and relational integrity.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to contact documents for a specific user.
     * @path /users/{userId}/contacts/{contactId}
     * @allow (create) User 'user_abc' can create a contact with 'id' and 'userId' matching the path.
     * @allow (get, update, delete) User 'user_abc' can get, update, and delete a contact with 'userId' matching the path.
     * @deny (create) User 'user_xyz' cannot create a contact under '/users/user_abc/contacts/{contactId}'.
     * @deny (get, update, delete) User 'user_xyz' cannot get, update, and delete a contact under '/users/user_abc/contacts/{contactId}'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/contacts/{contactId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the resource.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the owner of the existing resource.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow reads
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      // Allow creates, enforcing userId and contactId to match path.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == contactId;

      // Allow updates, enforcing userId in the path matches existing document's userId and that the document exists.
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Allow deletes if the user is the owner of the existing resource and that the document exists.
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to group documents for a specific user.
     * @path /users/{userId}/groups/{groupId}
     * @allow (create) User 'user_abc' can create a group with 'id' matching the path.
     * @allow (get, update, delete) User 'user_abc' can get, update, and delete a group with 'userId' matching the path.
     * @deny (create) User 'user_xyz' cannot create a group under '/users/user_abc/groups/{groupId}'.
     * @deny (get, update, delete) User 'user_xyz' cannot get, update, and delete a group under '/users/user_abc/groups/{groupId}'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/groups/{groupId} {
       // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the resource.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the owner of the existing resource.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow reads
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      // Allow creates, enforcing userId and groupId to match path.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == groupId;

      // Allow updates, enforcing userId in the path matches existing document's userId and that the document exists.
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Allow deletes if the user is the owner of the existing resource and that the document exists.
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}